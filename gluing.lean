import tactic
import .topology
noncomputable theory

section covers

-- cover of a set
structure cover (I X : Type) :=
  (part : I ‚Üí set X)
  (hx : ‚àÄ (x : X), ‚àÉ (i : I), x ‚àà part i)

-- coercion so we can write "U i" when (U : cover I X) and (i : I)
instance cover_to_parts (I X : Type) : has_coe_to_fun (cover I X) :=
  {F   := Œª _, I ‚Üí set X,
   coe := Œª U, U.part}

-- consistent functions on each part of the cover
structure gluing_data (I X Y : Type) :=
  (U : cover I X)
  (f : Œ† (i : I), U i ‚Üí Y)
  (hglue : ‚àÄ (i j : I) (x : X) (hxi : x ‚àà U i) (hxj : x ‚àà U j),
    (f i) ‚ü®x, hxi‚ü© = (f j) ‚ü®x, hxj‚ü©)

-- what it means for f : X ‚Üí Y to be compatible with gluing data
def compatible {I X Y : Type} (gl : gluing_data I X Y) (f : X ‚Üí Y) :=
  ‚àÄ (i : I) (x : X) (hxi : x ‚àà gl.U i), f x = gl.f i ‚ü®x, hxi‚ü©

lemma compatible_iff_restrict_eq
  {I X Y : Type} (gl : gluing_data I X Y) {f : X ‚Üí Y} :
  compatible gl f ‚Üî ‚àÄ (i : I), subtype.restrict f _ = gl.f i :=
begin
  split; intros hf i, specialize hf i,
  ext ‚ü®x, hx‚ü©, rw subtype.restrict_apply, exact hf x hx,
  intros x hx, rw ‚Üê hf, rw subtype.restrict_apply,
end

-- existence of compatible function
-- (uses choice, even though the result is unique)
def mk_function {I X Y : Type} (gl : gluing_data I X Y) : X ‚Üí Y :=
Œª x, let ‚ü®i, hxi‚ü© := classical.subtype_of_exists (gl.U.hx x) in
  gl.f i ‚ü®x, hxi‚ü©

lemma mk_compatible {I X Y} (gl : @gluing_data I X Y) :
  compatible gl (mk_function gl) :=
begin
  intros i x hxi,
  let j := classical.subtype_of_exists (gl.U.hx x),
  exact gl.hglue j.val i x j.prop hxi,
end

lemma compatible_unique {I X Y : Type} (gl : @gluing_data I X Y) (f g : X ‚Üí Y) :
  compatible gl f ‚Üí compatible gl g ‚Üí f = g :=
begin
  intros hf hg,
  ext, obtain ‚ü®i, hxi‚ü© := gl.U.hx x,
  specialize hf i x hxi,
  specialize hg i x hxi,
  rwa [hf, hg],
end

section refine

variables
  (I J X Y : Type)
  (CI : cover I X)
  (CJ : cover J X)
  (gl : gluing_data I X Y)

def refine : cover (I √ó J) X :=
 ‚ü®Œª ‚ü®i, j‚ü©, (CI.part i) ‚à© (CJ.part j),
  Œª x, let ‚ü®i, hxi‚ü© := CI.hx x in
       let ‚ü®j, hxj‚ü© := CJ.hx x in
       ‚ü®‚ü®i, j‚ü©, ‚ü®hxi, hxj‚ü©‚ü©‚ü©

/- 
Note: this is asymmetric: f is defined on U·µ¢ ‚à© V‚±º 
as the restriction of f from U·µ¢, not V‚±º.
-/
def gl_refine : gluing_data (I √ó J) X Y :=
  ‚ü® -- U, f, hglue
    refine I J X gl.U CJ, -- U
    Œª ‚ü®i, j‚ü© ‚ü®x, hxij‚ü©,
    gl.f i ‚ü®x, hxij.left‚ü©,
    Œª ‚ü®i‚ÇÅ, j‚ÇÅ‚ü© ‚ü®i‚ÇÇ, j‚ÇÇ‚ü© x ‚ü®hxi‚ÇÅ, hxj‚ÇÅ‚ü© ‚ü®hxi‚ÇÇ, hxj‚ÇÇ‚ü©,
    gl.hglue i‚ÇÅ i‚ÇÇ x hxi‚ÇÅ hxi‚ÇÇ,
  ‚ü©

lemma compat_of_refine_of_compat (f : X ‚Üí Y) :
  compatible gl f ‚Üí
  compatible (gl_refine _ _ _ _ CJ gl) f :=
begin
  rintros hf ‚ü®i, j‚ü© x ‚ü®hxi, hxj‚ü©,
  exact hf i x hxi,
end

end refine

end covers

section open_cover
open topology

variables (I X Y : Type) [topology X] [topology Y]

structure open_cover extends (cover I X) :=
  (hopen : ‚àÄ (i : I), part i ‚àà topology.opens X)

instance : has_coe (open_cover I X) (cover I X) := ‚ü®Œª U, ‚ü®U.part, U.hx‚ü©‚ü©

structure cts_gluing_data :=
  (U : open_cover I X)
  (f : Œ† (i : I), (U i) ‚Üí Y)
  (hglue : ‚àÄ (i j : I) (x : X) (hxi : x ‚àà U i) (hxj : x ‚àà U j),
    (f i) ‚ü®x, hxi‚ü© = (f j) ‚ü®x, hxj‚ü©)
  (hf : Œ† (i : I), cts (f i))

instance : has_coe (cts_gluing_data I X Y) (gluing_data I X Y) :=
  ‚ü®Œª gl, ‚ü®gl.U, gl.f, gl.hglue‚ü©‚ü©

variables
  (U : open_cover I X) (gl : cts_gluing_data I X Y)
  (f g : X ‚Üí Y)

lemma cts_iff_cts_on_cover (f : X ‚Üí Y) : cts f ‚Üî 
  Œ† (i : I), @cts _ _ (topology.subspace_topology (U i)) _
                      (subtype.restrict f (U i)) :=
begin
  split,
  intros hf i, apply pullback_cts_along_inverse_image, exact hf,
  intro hfi,
  -- check continuity pointwise, then on a piece of the cover
  rw cts_iff_ptwise_cts, intro x,
  obtain ‚ü®i, hxi‚ü© := U.hx x, specialize hfi i,
  rw cts_iff_ptwise_cts at hfi, specialize hfi ‚ü®x, hxi‚ü©,
  rwa cts_at_pt_of_open f (U i) (U.hopen i) x hxi,
end

-- function compatible with cts gluing data is cts
-- (mostly equivalent to cts_iff_cts_on_cover)
lemma cts_of_cts_compat :
  compatible (gl : gluing_data I X Y) f ‚Üí cts f :=
begin
  intro hf,
  rw cts_iff_cts_on_cover I X Y gl.U,
  rw compatible_iff_restrict_eq at hf,
  intro i, specialize hf i, convert gl.hf i,
end

-- the glued function is continuous! üéâ
lemma mk_function_cts : cts (mk_function (gl : gluing_data I X Y)) :=
  cts_of_cts_compat I X Y gl
  (mk_function (gl : gluing_data I X Y))
  (mk_compatible ‚Üëgl)

end open_cover

-- an attempt at doing covers using maps rather than subsets
section b_cover

structure b_cover (I X : Type) :=
  (part   : I ‚Üí Type)
  (map    : Œ† {i : I}, (part i) ‚Üí X)
  (hx     : ‚àÄ (x : X), ‚àÉ i (u : part i), map u = x)

instance b_cover_to_parts (I X : Type) : has_coe_to_fun (b_cover I X) :=
  {F   := Œª _, I ‚Üí Type,
   coe := Œª U, U.part}

def to_fun {I X : Type} (U : b_cover I X) (i : I) : U i ‚Üí X :=
  Œª x, U.map x

structure b_cover‚ÇÇ (I X : Type) extends (b_cover I X) :=
  (part‚ÇÇ   : I ‚Üí I ‚Üí Type)
  (map‚ÇÇl   : Œ† {i j : I}, (part‚ÇÇ i j) ‚Üí part i)
  (map‚ÇÇr   : Œ† {i j : I}, (part‚ÇÇ i j) ‚Üí part j)
  (compat‚ÇÇ : Œ† {i j : I} (u_ij : part‚ÇÇ i j), 
             map (map‚ÇÇl u_ij) = map (map‚ÇÇr u_ij))
  (hx‚ÇÇ     : ‚àÄ {i j : I} {u_i : part i} {u_j : part j},
             map u_i = map u_j ‚Üî
             ‚àÉ u_ij, map‚ÇÇl u_ij = u_i ‚àß map‚ÇÇr u_ij = u_j)

-- consistent functions on each part of the cover
structure b_gluing_data (I X Y : Type) extends (b_cover‚ÇÇ I X) :=
  (f  : Œ† {i : I}, part i ‚Üí Y)
  (hglue : ‚àÄ {i j : I} (u : part‚ÇÇ i j),
           f (map‚ÇÇl u) = f (map‚ÇÇr u))

-- what it means for f : X ‚Üí Y to be compatible with gluing data
def b_compatible {I X Y : Type} (gl : b_gluing_data I X Y) (f : X ‚Üí Y) :=
  ‚àÄ {i : I} (u : gl.part i), f (gl.map u) = gl.f u

-- existence of compatible function
-- (uses choice, even though the result is unique)
def b_mk_function {I X Y : Type} (gl : b_gluing_data I X Y) : X ‚Üí Y :=
  Œª x, let hi := classical.some_spec (gl.hx x) in
       let u := classical.some hi in
       gl.f u

lemma b_mk_compatible {I X Y} (gl : b_gluing_data I X Y) :
  b_compatible gl (b_mk_function gl) :=
begin
  intros i v,
  let hi := classical.some_spec (gl.hx (gl.map v)),
  let u := classical.some hi,
  let hu := classical.some_spec hi, rw gl.hx‚ÇÇ at hu,
  change gl.f u = gl.f v,
  obtain ‚ü®uij, hl, hr‚ü© := hu, change gl.map‚ÇÇl uij = u at hl,
  have key := gl.hglue uij, rwa [hl, hr] at key,
end

lemma b_compatible_unique {I X Y : Type} (gl : b_gluing_data I X Y) (f g : X ‚Üí Y) :
  b_compatible gl f ‚Üí b_compatible gl g ‚Üí f = g :=
begin
  intros hf hg,
  ext, obtain ‚ü®i, ‚ü®u, hu‚ü©‚ü© := gl.hx x,
  specialize hf u, specialize hg u, rw hu at *,
  rwa [hf, hg],
end

section b_refine

variables
  (I J X Y : Type)
  (CI : b_cover I X)
  (CJ : b_cover J X)
  (gl : b_gluing_data I X Y)

def b_refine : b_cover (I √ó J) X :=
 ‚ü®Œª ‚ü®i, j‚ü©, {uv : CI i √ó CJ j // CI.map uv.fst = CJ.map uv.snd},
  Œª ‚ü®i, j‚ü© ‚ü®uv, h‚ü©, CI.map uv.fst,
  begin
    intro x,
    obtain ‚ü®i, ‚ü®u, hu‚ü©‚ü© := CI.hx x,
    obtain ‚ü®j, ‚ü®v, hv‚ü©‚ü© := CJ.hx x,
    use ‚ü®i, j‚ü©, use ‚ü®u, v‚ü©, rwa [hu, hv],
  end‚ü©

/- 
Note: this is asymmetric: f is defined on U·µ¢ ‚à© V‚±º 
as the restriction of f from U·µ¢, not V‚±º.
-/
def b_gl_refine : b_gluing_data (I √ó J) X Y := sorry
/-
  ‚ü® -- U, f, hglue
    b_refine I J X CI CJ, -- U
    Œª ‚ü®i, j‚ü© ‚ü®x, hxij‚ü©,
    gl.f i ‚ü®x, hxij.left‚ü©,
    Œª ‚ü®i‚ÇÅ, j‚ÇÅ‚ü© ‚ü®i‚ÇÇ, j‚ÇÇ‚ü© x ‚ü®hxi‚ÇÅ, hxj‚ÇÅ‚ü© ‚ü®hxi‚ÇÇ, hxj‚ÇÇ‚ü©,
    gl.hglue i‚ÇÅ i‚ÇÇ x hxi‚ÇÅ hxi‚ÇÇ,
  ‚ü©
-/

end b_refine
end b_cover
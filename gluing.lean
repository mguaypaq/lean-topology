import tactic
import .topology
noncomputable theory

section covers

-- cover of a set
structure cover (I X : Type) :=
  (part : I ‚Üí set X)
  (hx : ‚àÄ (x : X), ‚àÉ (i : I), x ‚àà part i)

-- consistent functions on each part of the cover
structure gluing_data (I X Y : Type) :=
  (U : cover I X)
  (f : Œ† (i : I), (U.part i) ‚Üí Y)
  (hglue : ‚àÄ (i j : I) (x : X) (hxi : x ‚àà U.part i) (hxj : x ‚àà U.part j),
    (f i) ‚ü®x, hxi‚ü© = (f j) ‚ü®x, hxj‚ü©)

-- what it means for f : X ‚Üí Y to be compatible with gluing data
def compatible {I X Y : Type} (gldata : gluing_data I X Y) (f : X ‚Üí Y) :=
  ‚àÄ (i : I) (x : X) (hxi : x ‚àà gldata.U.part i), f x = gldata.f i ‚ü®x, hxi‚ü©

lemma compatible_iff_restrict_eq
  {I X Y : Type} (gldata : gluing_data I X Y) {f : X ‚Üí Y} :
  compatible gldata f ‚Üî ‚àÄ (i : I), subtype.restrict f _ = gldata.f i :=
begin
  split; intros hf i, specialize hf i,
  ext ‚ü®x, hx‚ü©, rw subtype.restrict_apply, exact hf x hx,
  intros x hx, rw ‚Üê hf, rw subtype.restrict_apply,
end

-- existence of compatible function
-- (uses choice, even though the result is unique)
def mk_function {I X Y : Type} (gldata : gluing_data I X Y) : X ‚Üí Y :=
Œª x, let ‚ü®i, hxi‚ü© := classical.subtype_of_exists (gldata.U.hx x) in
  gldata.f i ‚ü®x, hxi‚ü©

lemma mk_compatible {I X Y} (gldata : @gluing_data I X Y) :
  compatible gldata (mk_function gldata) :=
begin
  intros i x hxi,
  let j := classical.subtype_of_exists (gldata.U.hx x),
  exact gldata.hglue j.val i x j.prop hxi,
end

lemma compatible_unique {I X Y : Type} (gldata : @gluing_data I X Y) (f g : X ‚Üí Y) :
  compatible gldata f ‚Üí compatible gldata g ‚Üí f = g :=
begin
  intros hf hg,
  ext, obtain ‚ü®i, hxi‚ü© := gldata.U.hx x,
  specialize hf i x hxi,
  specialize hg i x hxi,
  rwa [hf, hg],
end

section refine

variables
  (I J X Y : Type)
  (CI : cover I X)
  (CJ : cover J X)
  (gldata : gluing_data I X Y)

def refine : cover (I √ó J) X :=
 ‚ü®Œª ‚ü®i, j‚ü©, (CI.part i) ‚à© (CJ.part j),
  Œª x, let ‚ü®i, hxi‚ü© := CI.hx x in
       let ‚ü®j, hxj‚ü© := CJ.hx x in
       ‚ü®‚ü®i, j‚ü©, ‚ü®hxi, hxj‚ü©‚ü©‚ü©

/- 
Note: this is asymmetric: f is defined on U·µ¢ ‚à© V‚±º 
as the restriction of f from U·µ¢, not V‚±º.
-/
def gl_refine : gluing_data (I √ó J) X Y :=
  ‚ü® -- U, f, hglue
    refine I J X gldata.U CJ, -- U
    Œª ‚ü®i, j‚ü© ‚ü®x, hxij‚ü©,
    gldata.f i ‚ü®x, hxij.left‚ü©,
    Œª ‚ü®i‚ÇÅ, j‚ÇÅ‚ü© ‚ü®i‚ÇÇ, j‚ÇÇ‚ü© x ‚ü®hxi‚ÇÅ, hxj‚ÇÅ‚ü© ‚ü®hxi‚ÇÇ, hxj‚ÇÇ‚ü©,
    gldata.hglue i‚ÇÅ i‚ÇÇ x hxi‚ÇÅ hxi‚ÇÇ,
  ‚ü©

variable (f : X ‚Üí Y)

lemma compat_of_refine_of_compat :
  compatible gldata f ‚Üí
  compatible (gl_refine _ _ _ _ CJ gldata) f :=
begin
  rintros hf ‚ü®i, j‚ü© x ‚ü®hxi, hxj‚ü©,
  exact hf i x hxi,
end

end refine

end covers

section open_cover

open topology

variables (I X Y : Type) (TX : topology X) (TY : topology Y)

structure open_cover extends (cover I X) :=
  (hopen : ‚àÄ (i : I), part i ‚àà TX.opens)

instance : has_coe (open_cover I X TX) (cover I X) := ‚ü®Œª U, ‚ü®U.part, U.hx‚ü©‚ü©

structure cts_gluing_data :=
  (U : open_cover I X TX)
  (f : Œ† (i : I), (U.part i) ‚Üí Y)
  (hglue : ‚àÄ (i j : I) (x : X) (hxi : x ‚àà U.part i) (hxj : x ‚àà U.part j),
    (f i) ‚ü®x, hxi‚ü© = (f j) ‚ü®x, hxj‚ü©)
  (hf : Œ† (i : I), @cts _ _ (topology.subspace_topology TX (U.part i)) TY (f i))

instance : has_coe (cts_gluing_data I X Y TX TY) (gluing_data I X Y) :=
  ‚ü®Œª gldata, ‚ü®gldata.U, gldata.f, gldata.hglue‚ü©‚ü©

variables
  (U : open_cover I X TX) (gldata : cts_gluing_data I X Y TX TY)
  (f g : X ‚Üí Y)

lemma cts_iff_cts_on_cover (f : X ‚Üí Y) : cts TX TY f ‚Üî 
  Œ† (i : I), @cts _ _ (topology.subspace_topology TX (U.part i)) TY
                      (subtype.restrict f _) :=
begin
  split,
  intros hf i, apply pullback_cts_along_inverse_image, exact hf,
  intro hfi,
  -- check continuity pointwise, then on a piece of the cover
  rw cts_iff_ptwise_cts, intro x,
  obtain ‚ü®i, hxi‚ü© := U.hx x, specialize hfi i,
  rw cts_iff_ptwise_cts at hfi, specialize hfi ‚ü®x, hxi‚ü©,
  rwa cts_at_pt_of_open TX TY f (U.part i) (U.hopen i) x hxi,
end

-- function compatible with cts gluing data is cts
-- (mostly equivalent to cts_iff_cts_on_cover)
lemma cts_of_cts_compat :
  compatible (gldata : gluing_data I X Y) f ‚Üí cts TX TY f :=
begin
  intro hf,
  rw cts_iff_cts_on_cover I X Y TX TY gldata.U,
  rw compatible_iff_restrict_eq at hf,
  intro i, specialize hf i, convert gldata.hf i,
end

-- the glued function is continuous! üéâ
lemma mk_function_cts : cts TX TY (mk_function (gldata : gluing_data I X Y)) :=
  @cts_of_cts_compat I X Y TX TY gldata
  (mk_function (gldata : gluing_data I X Y))
  (mk_compatible ‚Üëgldata)

section fiber_bundle

parameters 

end fiber_bundle

end open_cover
